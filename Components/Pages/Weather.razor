@page "/weather"

@using WheatherForecastBlazorWithRedisCache.Extensions
@inject WeatherForcastService WeatherForecastService
@inject IDistributedCache cache
@rendermode InteractiveServer
@* @attribute [StreamRendering] *@

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>
<button class="btn btn-primary" @onclick="LoadForecast">Load Forecast</button>

@if (forecasts is null && loadLocation is null)
{
    <p><em>Click the button to Load Forecast</em></p>
}

@if (forecasts is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="h3 @isCacheData">@loadLocation</div>
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private string loadLocation;
    private string isCacheData ="" ;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherForecastService.getForecastAsync(DateTime.Now);
    }

    private async Task LoadForecast()
    {
        Console.WriteLine("LoadForecast button clicked!");

        forecasts = null ;
        loadLocation = null;
        string recordKey = "WeatherForecast_" + DateTime.Now.ToString("yyyyMMdd_hhmm");
        
        forecasts = await cache.GetRecordAsync<WeatherForecast[]>(recordKey);

        if(forecasts is null)
        {
            loadLocation = $"Loaded from API at {DateTime.Now}";
            isCacheData="";
            forecasts = await WeatherForecastService.getForecastAsync(DateTime.Now);
            await cache.SetRecordAsync(recordKey,forecasts);
        }

        else
        {
            isCacheData="text-danger";
             loadLocation = $"Loaded from Cache at {DateTime.Now}";
        }

    }


}
